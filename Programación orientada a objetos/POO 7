Ejercicio 1: Aflojá con el aparatito
Definí la clase Celular y también los métodos initialize, utilizar! y cargar_a_tope!.
 
Resolución: class Celular
def initialize

  @bateria = 100
end

def utilizar!(minutos)
  @bateria -= minutos/2
end

def cargar_a_tope!
  @bateria = 100
end

end

 
Ejercicio 2: Notebook
Definí la clase Notebook, que sepa entender los mensajes initialize, utilizar! y cargar_a_tope!.
 
Resolución: class Notebook
def initialize

  @bateria = 100
end

def utilizar!(minutos)
  @bateria -= minutos
end

def cargar_a_tope!
  @bateria = 100
end

end

Ejercicio 3: Su superclase
Definí la clase Dispositivo y modificá las clases que definiste anteriormente para evitar que haya métodos repetidos entre Celular y Notebook. Es importante que en el editor definas arriba la superclase y abajo sus subclases.

Resolución: class Dispositivo
def initialize
  @bateria = 100
end
def cargar_a_tope!
  @bateria = 100
end
end

class Celular < Dispositivo
def utilizar!(minutos)
  @bateria -= minutos/2
end
end

class Notebook < Dispositivo
def utilizar!(minutos)
  @bateria -= minutos
end
end


Ejercicio 4: Arte abstracto
continuar

Ejercicio 5: ¿Me estás cargando? 
Definí el método descargado? en donde corresponda.

Resolución: class Dispositivo
def initialize
  @bateria=100
end
def cargar_a_tope!
  @bateria=100
end
def descargado?
  @bateria <= 20
end
end

class Celular<Dispositivo
def utilizar!(minutos)
  @bateria=@bateria-(minutos)/2
end
end

class Notebook<Dispositivo
def utilizar!(minutos)
  @bateria=@bateria-(minutos)
end
end


Ejercicio 6: Prueba sorpresa
Probá en la consola los siguientes comandos:

Resolución:
 un_celu = Celular.new
 una_notebook = Notebook.new
 un_celu.descargado?
 un_celu.utilizar! 180
 un_celu.descargado?
 una_notebook.utilizar! 100
 una_notebook.cargar_a_tope!
 una_notebook.descargado?

Ejercicio 7: Vamos de paseo
Definí las clases Moto, Auto y MedioDeTransporte y hace que las dos primeras hereden de la tercera. También definí los métodos initialize, recorrer!, cargar_combustible!, entran? y maximo_personas donde correspondan.

Resolución: class MedioDeTransporte
def initialize(combustible)
  @combustible = combustible
end

def cargar_combustible!(cantidad)
  @combustible += cantidad
end

def entran?(personas)
  personas <= maximo_personas
end

end

class Auto < MedioDeTransporte

def maximo_personas
  5
end

def recorrer!(distancia)
  @combustible -= distancia/2
end

end

class Moto < MedioDeTransporte

def maximo_personas
  2
end

def recorrer!(distancia)
  @combustible -= distancia
end

end
  
Ejercicio 8: Subí nomás
Definí la clase Colectivo con sus métodos correspondientes. No te olvides que los colectivos son medios de transporte.

Resolución: class Colectivo < MedioDeTransporte
def maximo_personas 
  20 
end

def recorrer!(km)
  @combustible -= km*2
end
end

Ejercicio 9: Inconsciente colectivos
Redefiní los métodos initialize y entran? en la clase Colectivo.

Resolución: class Colectivo < MedioDeTransporte
def initialize
  @combustible =    100
  @pasajeros = 0
end

def entran?(cantidad)
  true
end

def maximo_personas 
  20 
end

def recorrer!(km)
  @combustible -= km*2
end
end


Ejercicio 10: Es un trabajo para super
Redefiní el método cargar_combustible! en Colectivo, de modo que haga lo mismo que cualquier MedioDeTransporte y además se quede sin pasajeros. Recordá utilizar super para evitar repetir lógica.

Resolución: class Colectivo < MedioDeTransporte
def initialize
  @combustible =    100
  @pasajeros = 0
end

def entran?(cantidad)
  true
end

def maximo_personas 
  20 
end

def recorrer!(km)
  @combustible -= km*2
end

def cargar_combustible!(litros)
  super + @pasajeros = 0
end
end


Ejercicio 11: El regreso de los zombis
Veamos si se entiende: hacé que la clase SuperZombi herede de Zombi y modificala para que defina únicamente los métodos cuyo comportamiento varía respecto de Zombi. ¡Notá que la inicialización también es igual en ambas clases!

Resolución: class Zombi
def initialize(salud_inicial)
  @salud = salud_inicial
end

def salud
  @salud
end

def gritar
  "¡agrrrg!"
end

def sabe_correr?
  false
end

def sin_vida?
  @salud == 0
end

def recibir_danio!(puntos)
  @salud = [@salud - puntos * 2, 0].max
end
end

class SuperZombi < Zombi

def sabe_correr?
  true
end

def recibir_danio!(puntos)
  @salud = [@salud - puntos * 3, 0].max
end

def regenerarse!
  @salud = 100
end
end

Ejercicio 12: Concretemos la herencia
Definí el método descansar! en donde corresponda.

Resolución: class Zombi
def initialize(salud_inicial)
  @salud = salud_inicial
end

def descansar!(min)
  @salud +=min
end

def salud
  @salud
end

def gritar
  "¡agrrrg!"
end

def sabe_correr?
  false
end

def sin_vida?
  @salud == 0
end

def recibir_danio!(puntos)
  @salud = [@salud - puntos * 2, 0].max
end
end

class SuperZombi < Zombi

def sabe_correr?
  true
end

def recibir_danio!(puntos)
  @salud = [@salud - puntos * 3, 0].max
end

def regenerarse!
  @salud = 100
end
end


Ejercicio 13: La defensa
Definí una clase abstracta Persona que agrupe el comportamiento que se repite y hacé que las clases Sobreviviente y Aliado hereden de ella.

Resolución: class Persona
def energia
  @energia
end

def atacar!(zombi, danio)
  zombi.recibir_danio! danio
end

end

class Sobreviviente < Persona
def initialize
  @energia = 1000
end

def beber!
  @energia *= 1.25
end

end

class Aliado < Persona
def initialize
  @energia = 500
end

def beber!
  @energia *= 1.10
end

def atacar!(zombi, danio)
  super +
    @energia *= 0.95
end
end


